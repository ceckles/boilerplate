id: SERVER-HTTP-STATUS
namespace: reloaddata

inputs:
  - id: url
    type: STRING
    required: true
    defaults:
      - "https://google.com"

tasks:
  - id: pythonscript
    type: io.kestra.plugin.scripts.python.Script
    runner: DOCKER
    script: |
      import requests 
      from kestra import Kestra
      import warnings

      warnings.filterwarnings('ignore', message='Unverified HTTPS request')

      try:
        response = requests.get('{{inputs.url}}', verify=False)
        print(response.status_code)

        Kestra.outputs({'status_code': response.status_code, 'text': response.text})
      except Exception as e:
        Kestra.outputs({'status_code': 0})
    beforeCommands:
      - pip install requests kestra
  - id: if
    type: io.kestra.core.tasks.flows.If
    condition: "{{outputs.pythonscript.vars.status_code != 200}}"
    then:
      - id: logError
        type: io.kestra.core.tasks.log.Log
        message: "‚ö†Ô∏è There's an error, sending message to Discord.‚ö†Ô∏è"
      - id: DiscordMessage
        type: io.kestra.plugin.notifications.discord.DiscordIncomingWebhook
        url: "{{ secret('DISCORD_WEBHOOK')}}"
        payload: |
          {
            "username": "Kestra",
            "content": "Monitoring alert for flow {{flow.namespace}}. {{flow.id}} request to {{inputs.url}} failed with: {{outputs.pythonscript.vars.status_code}}"
          }
    else:
      - id: logSuccessful
        type: io.kestra.core.tasks.log.Log
        message: "Everything is okay üëç."
triggers:
  - id: schedule_trigger
    type: io.kestra.core.models.triggers.types.Schedule
    cron: '*/15 * * * *'
    inputs: {url: 'https://google.com'}